"""
Enhanced Email Sender for AI News Briefings
Supports HTML templates, multiple providers, attachments, and scheduling
"""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path
from typing import Optional, List
from datetime import datetime
import re
from dotenv import load_dotenv
import sys

# Load environment variables
load_dotenv()

# Safe symbol detection
_DEF_ENCODING = sys.stdout.encoding or 'utf-8'
try:
    'âœ“'.encode(_DEF_ENCODING)
    _CHECK = 'âœ“'
except Exception:
    _CHECK = 'OK'
try:
    'âœ—'.encode(_DEF_ENCODING)
    _CROSS = 'âœ—'
except Exception:
    _CROSS = 'X'

# ==================== HELPER FUNCTION ====================
def get_env_clean(key: str, default: str = "") -> str:
    """Get environment variable and strip quotes if present"""
    value = os.getenv(key, default)
    if value and isinstance(value, str):
        value = value.strip("'\"")
    return value

# ==================== CONFIGURATION ====================

# Email provider settings
EMAIL_PROVIDER = os.getenv("EMAIL_PROVIDER", "gmail").lower()

# SMTP Configuration
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USE_TLS = os.getenv("SMTP_USE_TLS", "true").lower() == "true"

# Credentials
SENDER_EMAIL = get_env_clean("SENDER_EMAIL")
SENDER_PASSWORD = get_env_clean("SENDER_PASSWORD")
SENDER_NAME = os.getenv("SENDER_NAME", "AI Intelligence Hub")

# Default recipient
DEFAULT_RECIPIENT = get_env_clean("RECIPIENT_EMAIL")

# Email settings
ENABLE_HTML = os.getenv("EMAIL_HTML", "true").lower() == "true"
ATTACH_AUDIO = os.getenv("EMAIL_ATTACH_AUDIO", "false").lower() == "true"
SMTP_TIMEOUT = int(os.getenv("SMTP_TIMEOUT", "30"))  # Default 30 second timeout

# Provider presets
PROVIDER_CONFIGS = {
    'gmail': {'server': 'smtp.gmail.com', 'port': 587, 'tls': True},
    'outlook': {'server': 'smtp-mail.outlook.com', 'port': 587, 'tls': True},
    'yahoo': {'server': 'smtp.mail.yahoo.com', 'port': 587, 'tls': True},
    'sendgrid': {'server': 'smtp.sendgrid.net', 'port': 587, 'tls': True}
}

print(f"ðŸ“§ Email Configuration:")
print(f"   Provider: {EMAIL_PROVIDER}")
print(f"   Sender: {SENDER_EMAIL}")
print(f"   Password: {_CHECK + ' Set' if SENDER_PASSWORD else _CROSS + ' Missing'}")

# ==================== HTML TEMPLATE ====================

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background: white;
            border-radius: 10px;
            padding: 40px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px 10px 0 0;
            margin: -40px -40px 30px -40px;
        }}
        .header h1 {{ margin: 0; font-size: 28px; font-weight: 700; }}
        .header p {{ margin: 10px 0 0 0; opacity: 0.9; font-size: 14px; }}
        .content {{ color: #333; }}
        .content h2 {{ color: #667eea; border-bottom: 2px solid #667eea; padding-bottom: 10px; margin-top: 30px; }}
        .content h3 {{ color: #764ba2; margin-top: 20px; }}
        .content a {{ color: #667eea; text-decoration: none; }}
        .content a:hover {{ text-decoration: underline; }}
        .footer {{ margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #999; text-align: center; }}
        code {{ background: #f4f4f4; padding: 2px 6px; border-radius: 3px; font-family: 'Courier New', monospace; }}
        pre {{ background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }}
        blockquote {{ border-left: 4px solid #667eea; margin: 20px 0; padding-left: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ¤– {title}</h1>
            <p>Generated on {date}</p>
        </div>
        <div class="content">{content}</div>
        <div class="footer">
            <p>This briefing was automatically generated by AI Intelligence Hub</p>
            <p>Powered by Google Gemini and CrewAI</p>
        </div>
    </div>
</body>
</html>
"""

def markdown_to_html(markdown_text: str) -> str:
    """Convert markdown to HTML (basic implementation)"""
    html = markdown_text
    # Convert headers
    html = re.sub(r'^# (.*?)$', r'<h1>\1</h1>', html, flags=re.MULTILINE)
    html = re.sub(r'^## (.*?)$', r'<h2>\1</h2>', html, flags=re.MULTILINE)
    html = re.sub(r'^### (.*?)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
    # Convert inline formatting
    html = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', html)
    html = re.sub(r'\*(.*?)\*', r'<em>\1</em>', html)
    html = re.sub(r'\[(.*?)\]\((.*?)\)', r'<a href="\2">\1</a>', html)
    
    # Smart paragraph wrapping: split by double newlines and only wrap non-block content
    blocks = html.split('\n\n')
    processed_blocks = []
    for block in blocks:
        block = block.strip()
        if not block:
            continue
        # Check if block starts with a block-level HTML tag
        if re.match(r'^<(h[1-6]|div|ul|ol|li|blockquote|pre|table|hr)', block, re.IGNORECASE):
            processed_blocks.append(block)
        else:
            # Wrap inline content in <p> tags
            processed_blocks.append(f'<p>{block}</p>')
    
    return '\n'.join(processed_blocks)

# FIXED: Parameter name changed from 'recipient' to 'recipient_email'
def send_email_briefing(
    briefing_content: str,
    recipient_email: Optional[str] = None,  # FIXED: Was 'recipient'
    subject: Optional[str] = None,
    cc_emails: Optional[List[str]] = None,
    attachment_path: Optional[Path] = None
) -> bool:
    """Send email briefing with HTML formatting and optional attachments"""

    if not SENDER_EMAIL or not SENDER_PASSWORD:
        print(f"{_CROSS} Email configuration incomplete. Please set SENDER_EMAIL and SENDER_PASSWORD.")
        return False

    recipient = recipient_email or DEFAULT_RECIPIENT
    if not recipient:
        print(f"{_CROSS} No recipient email specified.")
        return False

    if not subject:
        subject = f"{os.getenv('EMAIL_SUBJECT_PREFIX', 'AI Intelligence Briefing')} - {datetime.now().strftime('%Y-%m-%d')}"

    msg = MIMEMultipart('alternative')
    msg['From'] = f"{SENDER_NAME} <{SENDER_EMAIL}>"
    msg['To'] = recipient
    msg['Subject'] = subject

    if cc_emails:
        msg['Cc'] = ', '.join(cc_emails)

    text_content = briefing_content

    if ENABLE_HTML:
        html_content = HTML_TEMPLATE.format(
            title="AI Intelligence Briefing",
            date=datetime.now().strftime('%B %d, %Y at %H:%M UTC'),
            content=markdown_to_html(briefing_content)
        )
        part1 = MIMEText(text_content, 'plain', 'utf-8')
        part2 = MIMEText(html_content, 'html', 'utf-8')
        msg.attach(part1)
        msg.attach(part2)
    else:
        part = MIMEText(text_content, 'plain', 'utf-8')
        msg.attach(part)

    if attachment_path and ATTACH_AUDIO and attachment_path.exists():
        try:
            with open(attachment_path, 'rb') as f:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(f.read())
                encoders.encode_base64(part)
                part.add_header('Content-Disposition', f'attachment; filename="{attachment_path.name}"')
                msg.attach(part)
            print(f"{_CHECK} Audio attachment added: {attachment_path.name}")
        except Exception as e:
            print(f"{_CROSS} Failed to attach audio file: {e}")

    try:
        if EMAIL_PROVIDER in PROVIDER_CONFIGS:
            config = PROVIDER_CONFIGS[EMAIL_PROVIDER]
            smtp_server = config['server']
            smtp_port = config['port']
            use_tls = config['tls']
        else:
            smtp_server = SMTP_SERVER
            smtp_port = SMTP_PORT
            use_tls = SMTP_USE_TLS

        print(f"ðŸ“¤ Connecting to {smtp_server}:{smtp_port}...")
        server = smtplib.SMTP(smtp_server, smtp_port, timeout=SMTP_TIMEOUT)

        if use_tls:
            server.starttls()

        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        recipients = [recipient] + (cc_emails or [])
        server.sendmail(SENDER_EMAIL, recipients, msg.as_string())
        server.quit()

        print(f"{_CHECK} Email sent successfully to {recipient}")
        if cc_emails:
            print(f"   CC: {', '.join(cc_emails)}")

        return True

    except Exception as e:
        print(f"{_CROSS} Failed to send email: {e}")
        return False